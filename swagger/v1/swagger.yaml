---
openapi: 3.0.1
info:
  title: API V1
  version: v1
paths:
  "/admins/sign_in":
    post:
      summary: Admin Sign in
      tags:
      - Admin Authentication
      parameters: []
      responses:
        '200':
          description: successful sign in
        '401':
          description: unauthorized
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                admin:
                  type: object
                  properties:
                    email:
                      type: string
                      example: admin@example.com
                    password:
                      type: string
                      example: password
                  required:
                  - email
                  - password
              required:
              - admin
  "/admins/sign_out":
    delete:
      summary: Admin Sign out
      tags:
      - Admin Authentication
      responses:
        '200':
          description: Logged out successfully
  "/admins/password":
    post:
      summary: Send reset password instructions
      tags:
      - Admin Authentication
      parameters: []
      responses:
        '200':
          description: password reset email sent
        '404':
          description: email not found
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                admin:
                  type: object
                  properties:
                    email:
                      type: string
                      example: admin@example.com
                  required:
                  - email
              required:
              - admin
    patch:
      summary: Update password
      tags:
      - Admin Authentication
      parameters: []
      responses:
        '200':
          description: password updated
        '422':
          description: unprocessable entity
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                reset_password_token:
                  type: string
                  example: reset-token
                password:
                  type: string
                  example: newpassword
                password_confirmation:
                  type: string
                  example: newpassword
              required:
              - reset_password_token
              - password
              - password_confirmation
  "/admins":
    post:
      summary: Create admin
      tags:
      - Admin Authentication
      parameters: []
      responses:
        '201':
          description: successful registration
        '422':
          description: unprocessable entity
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                admin:
                  type: object
                  properties:
                    email:
                      type: string
                      example: newadmin@example.com
                    password:
                      type: string
                      example: password
                    password_confirmation:
                      type: string
                      example: password
                  required:
                  - email
                  - password
                  - password_confirmation
              required:
              - admin
  "/books":
    get:
      summary: Retrieves all books, optionally filtered by genre
      tags:
      - Books
      description: Retrieves a list of all books. Optionally, you can filter by genre.
      parameters:
      - name: genre
        in: query
        description: Filter books by genre
        schema:
          type: string
      responses:
        '200':
          description: Books found
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: integer
                    title:
                      type: string
                    author:
                      type: string
                    genre:
                      type: string
                    isbn:
                      type: string
                    available_copies:
                      type: integer
                  required:
                  - id
                  - title
                  - author
                  - genre
                  - isbn
                  - available_copies
    post:
      summary: Creates a new book
      tags:
      - Books
      description: Creates a new book entry.
      parameters: []
      responses:
        '201':
          description: Book created
        '422':
          description: Invalid request
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                  example: The Great Gatsby
                author:
                  type: string
                  example: F. Scott Fitzgerald
                genre:
                  type: string
                  example: Novel
                isbn:
                  type: string
                  example: '9780743273565'
                available_copies:
                  type: integer
                  example: 10
              required:
              - title
              - author
              - genre
              - isbn
              - available_copies
  "/books/{id}":
    parameters:
    - name: id
      in: path
      description: ID of the book
      required: true
      schema:
        type: integer
    get:
      summary: Retrieves a specific book
      tags:
      - Books
      description: Retrieves a specific book by its ID.
      responses:
        '200':
          description: Book found
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                  title:
                    type: string
                  author:
                    type: string
                  genre:
                    type: string
                  isbn:
                    type: string
                  available_copies:
                    type: integer
                required:
                - id
                - title
                - author
                - genre
                - isbn
                - available_copies
        '404':
          description: Book not found
    patch:
      summary: Updates a specific book
      tags:
      - Books
      description: Updates a specific book by its ID.
      parameters: []
      responses:
        '200':
          description: Book updated
        '422':
          description: Invalid request
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                  example: The Great Gatsby Updated
                author:
                  type: string
                  example: F. Scott Fitzgerald
                genre:
                  type: string
                  example: Novel
                isbn:
                  type: string
                  example: '9780743273565'
                available_copies:
                  type: integer
                  example: 15
              required:
              - title
              - author
              - genre
              - isbn
              - available_copies
    delete:
      summary: Deletes a specific book
      tags:
      - Books
      description: Deletes a specific book by its ID.
      responses:
        '204':
          description: Book deleted
        '404':
          description: Book not found
  "/users/sign_in":
    post:
      summary: User Sign in
      tags:
      - User Authentication
      parameters: []
      responses:
        '200':
          description: successful sign in
        '401':
          description: unauthorized
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                user:
                  type: object
                  properties:
                    email:
                      type: string
                      example: user@example.com
                    password:
                      type: string
                      example: password
                  required:
                  - email
                  - password
              required:
              - user
  "/users/sign_out":
    delete:
      summary: User Sign out
      tags:
      - User Authentication
      responses:
        '200':
          description: Logged out successfully
  "/users/password":
    post:
      summary: Send reset password instructions
      tags:
      - User Authentication
      parameters: []
      responses:
        '200':
          description: password reset email sent
        '404':
          description: email not found
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                user:
                  type: object
                  properties:
                    email:
                      type: string
                      example: user@example.com
                  required:
                  - email
              required:
              - user
    patch:
      summary: Update password
      tags:
      - User Authentication
      parameters: []
      responses:
        '200':
          description: password updated
        '422':
          description: unprocessable entity
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                reset_password_token:
                  type: string
                  example: reset-token
                password:
                  type: string
                  example: newpassword
                password_confirmation:
                  type: string
                  example: newpassword
              required:
              - reset_password_token
              - password
              - password_confirmation
  "/users":
    post:
      summary: Create user
      tags:
      - User Authentication
      parameters: []
      responses:
        '201':
          description: successful registration
        '422':
          description: unprocessable entity
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                user:
                  type: object
                  properties:
                    email:
                      type: string
                      example: newuser@example.com
                    password:
                      type: string
                      example: password
                    password_confirmation:
                      type: string
                      example: password
                  required:
                  - email
                  - password
                  - password_confirmation
              required:
              - user
servers:
- url: http://127.0.0.1:3000/
  variables:
    defaultHost:
      default: http://127.0.0.1:3000/
